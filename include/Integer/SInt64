#pragma once
#ifndef karyon_Integer_SInt64
#define karyon_Integer_SInt64

#include <Exception/Overflow>

#include <Integer/Integer>

#include <unlikely>

namespace Integer {
	class SInt64
#if (defined __GNUC__ || defined __clang__) && defined __INT64_TYPE__
#	define SINT64(const) SInt64({ __INT64_C(const) })
		: public Integer<__INT64_TYPE__> {
#else
#	define SINT64(const) SInt64({ const ## LL })
		: public Integer<signed long long int> {
#endif
	public:
		inline SInt64()
			throw () {
		}

		inline SInt64(const Base value)
			throw ()
			: Integer(value) {
		}

		inline SInt64(const Integer& integer)
			throw ()
			: Integer(integer) {
		}

		inline SInt64& operator=(const SInt64 integer) restrict
			throw () {
			value = integer.value;
			return *this;
		}
	};
}

#endif
