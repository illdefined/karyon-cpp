#pragma once
#ifndef karyon_Integer_UInt64
#define karyon_Integer_UInt64

#include <Exception/Overflow>

#include <Integer/Integer>

#include <constexpr>
#include <unlikely>

namespace Integer {
	class UInt64
#if (defined __GNUC__ || defined __clang__) && defined __UINT64_TYPE__
#	define UINT64(const) UInt64({ __UINT64_C(const) })
		: public Integer<__UINT64_TYPE__> {
#else
#	define UINT64(const) UInt64({ const ## ULL })
		: public Integer<unsigned long long int> {
#endif
	public:
		inline UInt64()
			throw () {
		}

		inline UInt64(const Base value)
			throw ()
			: Integer(value) {
		}

		inline UInt64(const Integer& integer)
			throw ()
			: Integer(integer) {
		}

		inline UInt64& operator=(const UInt64 integer) restrict
			throw () {
			value = integer.value;
			return *this;
		}

		inline UInt64 byteSwap() const restrict
			throw () {
#if defined __GNUC__ || defined __clang__
			if (!constexpr(value))
				return __builtin_bswap64(value);
#endif

			return
				  (*this & UINT64(0xff00000000000000)) >> 56
				| (*this & UINT64(0x00ff000000000000)) >> 40
				| (*this & UINT64(0x0000ff0000000000)) >> 24
				| (*this & UINT64(0x000000ff00000000)) >>  8
				| (*this & UINT64(0x00000000ff000000)) <<  8
				| (*this & UINT64(0x0000000000ff0000)) << 24
				| (*this & UINT64(0x000000000000ff00)) << 40
				| (*this & UINT64(0x00000000000000ff)) << 56;

		}
	};
}

#endif
