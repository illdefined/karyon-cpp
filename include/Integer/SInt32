#pragma once
#ifndef karyon_Integer_SInt32
#define karyon_Integer_SInt32

#include <Exception/Overflow>

#include <Integer/Integer>
#include <Integer/SInt64>

#include <unlikely>

namespace Integer {
	class SInt32
#if (defined __GNUC__ || defined __clang__) && defined __INT32_TYPE__
#	define SINT32(const) SInt32({ __INT32_C(const) })
		: public Integer<__INT32_TYPE__> {
#else
#	define SINT32(const) SInt32({ const })
		: public Integer<signed int> {
#endif
	public:
		inline SInt32()
			throw () {
		}

		inline SInt32(const Base value)
			throw ()
			: Integer(value) {
		}

		inline SInt32(const Integer& integer)
			throw ()
			: Integer(integer) {
		}

		SInt32 operator*(const SInt32 multiplier) const restrict
			throw (Exception::Overflow) {
			register SInt64::Base product = value * multiplier.value;

			if (unlikely(product > maximum())
				|| unlikely(product < minimum()))
				throw Exception::Overflow();

			return product;
		}

		inline SInt32& operator=(const SInt32 integer) restrict
			throw () {
			value = integer.value;
			return *this;
		}

		inline SInt32& operator*=(const SInt32 multiplier) restrict
			throw (Exception::Overflow) {
			return *this = *this * multiplier;
		}
	};
}

#endif
